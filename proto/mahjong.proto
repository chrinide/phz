syntax = "proto3";

option java_multiple_files = true;
option java_package = "mahjong.mode.proto";

package majong_rpc;

service MajongCalculate {
    //进行麻将牌过程计算
    rpc calculate (CalculateData) returns (CalculateResult) {
    }

    //结算
    rpc settle (SettleData) returns (SettleResult) {
    }

    //洗牌函数
    rpc shuffle (ShuffleData) returns (ShuffleResult) {
    }

    rpc baojiaoGang (CalculateData) returns (Cards) {
    }
}

message Cards {
    repeated int32 cards = 1;
}

//杠牌类型
enum GangType {
    BGANG = 0; //巴杠
    MGANG = 1; //明杠
    AGANG = 2; //暗杠
}

message GangData {
    GangType type = 1;
    repeated int32 fighter = 2; //放杠者的ID
    int32 gangvalue = 3; //杠了哪张牌
}

message MahjongPlayerData {
    int32 player_id = 1;
    repeated int32 handlist = 2; //手牌
    repeated int32 chi = 3; //吃过的牌
    repeated int32 peng = 4; //碰过的牌
    repeated GangData gang = 5; //杠过的牌
    bool baojiao = 6; //报叫
    int32 score = 7;
}

//申请麻将游戏的逻辑计算
message CalculateData {
    int32 allocid = 1;
    MahjongPlayerData player = 2;
    int32 rogue = 3;
}

//麻将游戏计算结果
message CalculateResult {
    repeated int32 chi = 1; //能够吃的牌
    repeated int32 dui = 2; //只能够碰的牌
    repeated int32 san = 3; //能杠或碰的牌
    repeated int32 si = 4; //只能暗杠的牌
    repeated int32 hu = 5; //能够胡的牌
    repeated int32 zimo = 6; //能自摸的牌
}

message SettleData {
    int32 alloc_id = 1;
    repeated MahjongPlayerData player = 2; //玩家数据
    int32 banker = 3; //本轮游戏的庄家ID
    repeated HuData hudata = 4;
    int32 rogue = 5;
    int32 fengding = 6; //封顶
    message HuData {
        int32 huUser = 1; //胡牌的人
        repeated int32 loseUsers = 2; //输家
        repeated int32 settle = 3; //胡牌类型
        int32 majong = 4; //胡的哪张牌
    }
}

message SettleResult {
    repeated UserSettleResult userSettleResule = 1;
}

//用户结算结果
message UserSettleResult {
    int32 userId = 1;
    int32 win = 2; //输赢分
    int32 gangScore = 3; //杠分
    int32 cardScore = 4; //牌型分
    repeated int32 settlePatterns = 5; //牌型
}

//作弊的数据
message CheatData {
    int32 player_id = 1;
    int32 loc = 2;
    int32 level = 3;
}

//申请洗牌的数据
message ShuffleData {
    int32 alloc_id = 1;
    repeated CheatData cheats = 2;
}

//洗牌结果
message ShuffleResult {
    repeated int32 cardlist = 1; //牌
}

//enum SettlePatterns {

//    ZI_MO = 0; //自摸
//    GANG_PAO = 1; //杠上炮
//    GANG_HUA = 2; //杠上花
//    QIANG_GANG = 3; //抢杠
//    QIAN_SI = 4; //前四
//    HOU_SI = 5; //后四
//    BAO_JIAO = 6; //报叫
//    CHA_JIAO = 7; //查叫
//    TIANHU = 8;//天胡
//    DIHU = 9;//地胡
//    PIHU = 10; //屁胡x2
//    DADUI = 11; //大对x12
//    JINGOUDIAO = 12; //金勾钓x24
//    QINGYISE = 13; //清一色x12
//    QINGDADUI = 14; //清大对x24
//    QINGSANDA = 15; //清三搭x48
//    QINGQIDUI = 16; //清七对x24
//    QINGLONGQIDUI = 17; //清龙七对x48
//    QINGSHUANGLONGQIDUI = 18; //清双龙七对x96
//    QINGSANLONGQIDUI = 19; //清三龙七对x96
//    QINGJINGOUDIAO = 20; //清金勾钓x96
//    QIDUI = 21; //七对x12
//    LONGQIDUI = 22; //龙七对x24
//    SHUANGLONGQIDUI = 23; //双龙七对x48
//    SANLONGQIDUI = 24; //三龙七对x96
//}
//enum SettlePatterns {
//    PINGHU = 0;
//    ZIMOHU = 1;
//    GUI = 2;
//    SHOUGUI = 3;
//    TIANHU = 4;
//    DIHU = 5;
//    BAOJIAO = 6;
//    DADUI = 7;
//    QINGYISE = 8;
//    QIDUI = 9;
//    LONGQIDUI = 10;
//    JINGOUDIAO = 11;
//    GANGSHANGPAO = 12;
//    GANGSHANGHUA = 13;
//    QIANGGANG = 14;
//}